import pandas as pd
import re

# Charger les 10 premi√®res lignes du fichier
df = pd.read_csv("annonces_94_sans_doublons.csv", sep=";")
print(df.columns.tolist())

# Nettoie les noms de colonnes
df.columns = (
    df.columns
    .str.encode('latin1')  # Corrige les caract√®res mal lus
    .str.decode('utf-8', errors='ignore')
    .str.strip()
)

print(df.columns.tolist())

# üßº Nettoyage du prix
def nettoyer_prix(prix):
    if pd.isna(prix):
        return None
    prix_str = re.sub(r"[^\d]", "", str(prix))
    return int(prix_str) if prix_str.isdigit() else None

# üßº Nettoyage des charges annuelles
def nettoyer_charges(val):
    if pd.isna(val) or val == "":
        return 0
    val_str = str(val)
    val_str = re.sub(r"[^\d]", "", val_str)
    return int(val_str) if val_str.isdigit() else 0

# üßº Nettoyage de l‚Äôarrondissement (extrait le code postal)
def nettoyer_arrondissement(texte):
    match = re.search(r"\((94\d{3})\)", str(texte))
    return int(match.group(1)) if match else None

# üßº Nettoyage de la superficie
def nettoyer_superficie(val):
    if pd.isna(val):
        return None
    val_str = str(val).replace(",", ".")
    val_str = re.sub(r"[^\d.]", "", val_str)
    try:
        return float(val_str)
    except ValueError:
        return None

# üè¢ Nettoyage √©tage
def clean_etage(val):
    if pd.isna(val):
        return None, None

    val = str(val).replace('.', ',')

    if "RDC" in val.upper():
        match = re.search(r'RDC/?(\d+)?', val.upper())
        etage = 0
        total = int(match.group(1)) if match and match.group(1) else None
        return etage, total

    match = re.search(r"(\d+)", val)
    return (int(match.group(1)), None) if match else (None, None)

# üì¶ Gestion des deux colonnes √©tage + nombre d'√©tages
def clean_deux_colonnes(row):
    val1, val2 = row.iloc[0], row.iloc[1]
    try:
        if pd.notna(val1) and pd.notna(val2):
            return int(val1), int(val2)
    except:
        pass
    return clean_etage(val1) if pd.notna(val1) else clean_etage(val2)

# üß≠ Nettoyage exposition
def map_exposition(val):
    if pd.isna(val):
        return None
    val = str(val).strip().lower().replace("√©", "e")

    exposition_map = {
        "nord": 1,
        "nord-est": 2,
        "nord est": 2,
        "est": 3,
        "sud-est": 4,
        "sud est": 4,
        "sud": 5,
        "sud-ouest": 6,
        "sud ouest": 6,
        "ouest": 7,
        "nord-ouest": 8,
        "nord ouest": 8
    }

    for key in exposition_map:
        if key in val:
            return exposition_map[key]
    return None

# üîã DPE et GES
def dpe_ges(val):
    if pd.isna(val):
        return None

    note_map = {
        "A": 1,
        "B": 2,
        "C": 3,
        "D": 4,
        "E": 5,
        "F": 6,
    }

    for key in note_map:
        if key in val:
            return note_map[key]
    return None

# ‚úÖ Transformation OUI/NON
def oui_non_to_binary(val):
    if pd.isna(val):
        return None
    val = str(val).strip().upper()
    if val == "OUI":
        return 1
    elif val == "NON":
        return 0
    return None

# ‚ú® Application des fonctions
df["prix"] = df["Prix"].apply(nettoyer_prix)
df["superficie"] = df["Superficie"].apply(nettoyer_superficie)
df["arrondissement"] = df["Arrondissement"].apply(nettoyer_arrondissement).astype("Int64")
df["charges_annuelles"] = df["Charge annuelles"].apply(nettoyer_charges)

df.loc[
    df["Superficie salon (m)"].isna() & (df["Nombre de pieces"] == 1),
    "Superficie salon (m)"
] = df["superficie"]

df["Exposition"] = df["Exposition"].apply(map_exposition)
df["DPE"] = df["DPE"].apply(dpe_ges)
df["GES"] = df["GES"].apply(dpe_ges)

# Nettoyage √©tage
etages_nettoyes = df[["Etage", "Nombre d'etages"]].apply(clean_deux_colonnes, axis=1, result_type='expand')
etages_nettoyes.columns = ["Etage", "Total_etages"]

colonnes_oui_non = [
    "Balcon", "Ascenseur", "Parking", "Cave", "Accessible_mobilit_rduite",
    "Interphone", "Alarme", "Digicode", "Gardien", "Cuisine ouverte",
    "Sans vis  vis", "Calme"
]

for col in colonnes_oui_non:
    if col in df.columns:
        df[col] = df[col].apply(oui_non_to_binary)

# Suppression colonnes redondantes
df = df.drop(columns=["Etage", "Nombre d'etages", "Arrondissement", "Superficie", "Prix", "Charge annuelles"])

# Fusion des nouveaux √©tages
df = pd.concat([df, etages_nettoyes], axis=1)

# ‚ùå Supprimer les lignes avec arrondissement vide
df = df[df["arrondissement"].notna()]

# üõ† Remplacer NaN restants par -1
df = df.fillna(-1)

# üíæ Export final
df.to_csv("94_nettoy√©.csv", index=False, sep=';')
print("‚úÖ Nettoyage termin√© avec -1 pour les champs vides !")
