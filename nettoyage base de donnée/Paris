import pandas as pd
import re

# 📥 Charger le fichier
df = pd.read_csv("paris.csv", sep=";")
print(df.columns.tolist())

# Nettoyer les noms de colonnes
df.columns = (
    df.columns
    .str.encode('latin1')
    .str.decode('utf-8', errors='ignore')
    .str.strip()
)

print(df.columns.tolist())

# 🧼 Nettoyage du prix
def nettoyer_prix(prix):
    if pd.isna(prix):
        return None
    prix_str = re.sub(r"[^\d]", "", str(prix))
    return int(prix_str) if prix_str.isdigit() else None

# 🧼 Nettoyage des charges annuelles
def nettoyer_charges(val):
    if pd.isna(val) or val == "":
        return 0
    val_str = re.sub(r"[^\d]", "", str(val))
    return int(val_str) if val_str.isdigit() else 0

# 🧼 Nettoyage de l’arrondissement
def nettoyer_arrondissement(texte):
    match = re.search(r"\((75\d{3})\)", str(texte))
    return int(match.group(1)) if match else None

# 🧼 Nettoyage de la superficie
def nettoyer_superficie(val):
    if pd.isna(val):
        return None
    val_str = str(val).replace(",", ".")
    val_str = re.sub(r"[^\d.]", "", val_str)
    try:
        return float(val_str)
    except ValueError:
        return None

# 🏢 Nettoyage étage
def clean_etage(val):
    if pd.isna(val):
        return None, None
    val = str(val).replace('.', ',')
    if "RDC" in val.upper():
        match = re.search(r'RDC/?(\d+)?', val.upper())
        etage = 0
        total = int(match.group(1)) if match and match.group(1) else None
        return etage, total
    match = re.search(r"(\d+)", val)
    return (int(match.group(1)), None) if match else (None, None)

# 📦 Fusion de deux colonnes étage
def clean_deux_colonnes(row):
    val1, val2 = row.iloc[0], row.iloc[1]
    try:
        if pd.notna(val1) and pd.notna(val2):
            return int(val1), int(val2)
    except:
        pass
    return clean_etage(val1) if pd.notna(val1) else clean_etage(val2)

# ☀️ Nettoyage exposition
def map_exposition(val):
    if pd.isna(val):
        return None
    val = str(val).strip().lower().replace("é", "e")
    exposition_map = {
        "nord": 1, "nord-est": 2, "nord est": 2,
        "est": 3, "sud-est": 4, "sud est": 4,
        "sud": 5, "sud-ouest": 6, "sud ouest": 6,
        "ouest": 7, "nord-ouest": 8, "nord ouest": 8
    }
    for key in exposition_map:
        if key in val:
            return exposition_map[key]
    return None

# 🔋 DPE & GES
def dpe_ges(val):
    if pd.isna(val):
        return None
    note_map = {"A": 1, "B": 2, "C": 3, "D": 4, "E": 5, "F": 6}
    for key in note_map:
        if key in val:
            return note_map[key]
    return None

# ✅ Oui/Non binaire
def oui_non_to_binary(val):
    if pd.isna(val):
        return None
    val = str(val).strip().upper()
    return 1 if val == "OUI" else 0 if val == "NON" else None

# 🔧 Application du nettoyage
df["prix"] = df["Prix"].apply(nettoyer_prix)
df["superficie"] = df["Superficie"].apply(nettoyer_superficie)
df["arrondissement"] = df["Arrondissement"].apply(nettoyer_arrondissement).astype("Int64")
df["charges_annuelles"] = df["Charge annuelles"].apply(nettoyer_charges)

# Copier la superficie dans "Superficie salon" si studio
df.loc[
    df["Superficie salon (m²)"].isna() & (df["Nombre de pieces"] == 1),
    "Superficie salon (m²)"
] = df["superficie"]

# Nettoyage colonnes Exposition, DPE, GES
df["Exposition"] = df["Exposition"].apply(map_exposition)
df["DPE"] = df["DPE"].apply(dpe_ges)
df["GES"] = df["GES"].apply(dpe_ges)

# Colonnes Oui/Non
colonnes_oui_non = [
    "Balcon", "Ascenseur", "Parking", "Cave", "Accessible_mobilité_réduite",
    "Interphone", "Alarme", "Digicode", "Gardien", "Cuisine ouverte",
    "Sans vis à vis", "Calme"
]
for col in colonnes_oui_non:
    if col in df.columns:
        df[col] = df[col].apply(oui_non_to_binary)

# Remplir DPE et GES manquants par la moyenne
for col in ["DPE", "GES"]:
    if col in df.columns:
        moyenne = round(df[col].mean())
        df[col].fillna(moyenne, inplace=True)

# ❌ Supprimer les lignes sans arrondissement
df = df[df["arrondissement"].notna() & (df["arrondissement"].astype(str).str.strip() != "")]

# 🏢 Nettoyage étage
etages_nettoyes = df[["Etage", "Nombre d'etages"]].apply(clean_deux_colonnes, axis=1, result_type='expand')
etages_nettoyes.columns = ["Etage", "Total_etages"]

# 🧼 One-hot encoding ARRONDISSEMENTS (ARD01 -> ARD21)
df["arr_code"] = df["arrondissement"].astype(str).str[-2:]
for i in range(1, 22):
    col_name = f"ard{i}"
    code = f"{i:02}"
    df[col_name] = (df["arr_code"] == code).astype(int)
df.drop(columns=["arr_code"], inplace=True)

# ☀️ One-hot encoding EXPOSITIONS (N, N-E, N-O, S, S-E, S-O)
exposition_labels = {
    1: "N",
    2: "N-E",
    8: "N-O",
    5: "S",
    4: "S-E",
    6: "S-O"
}
for code, label in exposition_labels.items():
    df[label] = (df["Exposition"] == code).astype(int)
df.drop(columns=["Exposition"], inplace=True)

# 🚮 Supprimer les colonnes originales devenues inutiles
df = df.drop(columns=["Etage", "Nombre d'etages", "Arrondissement", "Superficie", "Prix", "Charge annuelles"])

# 🔀 Ajouter les colonnes d'étage nettoyées
df = pd.concat([df, etages_nettoyes], axis=1)

# ➖ Remplacer les NaN restants par -1
df = df.fillna(-1)

# 💾 Export final
df.to_csv("paris_nettoyé.csv", index=False, sep=';')
print("✅ Nettoyage terminé ! Fichier exporté.")
