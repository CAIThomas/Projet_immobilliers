# -*- coding: utf-8 -*-
"""
Created on Sat Apr  5 20:44:51 2025

@author: thoma
"""

# -*- coding: utf-8 -*-
"""
Created on Wed Mar 26 17:45:44 2025

@author: thoma
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoSuchElementException, TimeoutException
import pandas as pd
import re
import time
import random

# Options Chrome
chrome_options = Options()
chrome_options.add_experimental_option('detach', True)  # Garde Chrome ouvert
chrome_options.add_argument("start-maximized")
chrome_options.add_argument("--incognito")
chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])

# D√©marrer WebDriver
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# URL de recherche
base_url = "https://www.logic-immo.com/classified-search?distributionTypes=Buy,Buy_Auction,Compulsory_Auction&estateTypes=House,Apartment&locations=AD08FR31096&order=Default"
search_url = f"{base_url}&m=homepage_new_search_classified_search_result"
driver.get(search_url)

# -------------------------------------------Accepter les cookies---------------------------------------------
def accept_cookies():
    try:
        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        for iframe in iframes:
            driver.switch_to.frame(iframe)
            try:
                accept_button = WebDriverWait(driver, 3).until(
                    EC.element_to_be_clickable((By.ID, "didomi-notice-agree-button"))
                )
                accept_button.click()
                print("‚úÖ Bouton 'TOUT ACCEPTER' cliqu√© dans l'iframe !")
                break
            except:
                driver.switch_to.default_content()

        accept_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "didomi-notice-agree-button"))
        )
        accept_button.click()
        print("‚úÖ Bouton 'TOUT ACCEPTER' cliqu√© avec succ√®s !")

    except Exception as e:
        print(f"‚ùå Impossible de cliquer sur 'TOUT ACCEPTER' : {e}")

accept_cookies()

# Sauvegarder la fen√™tre originale
original_window = driver.current_window_handle

# Liste pour stocker les donn√©es
data = []

# Param√®tres de pagination
current_page = 1
max_pages = 1  # Vous pouvez ajuster ce nombre selon vos besoins

while current_page <= max_pages:
    print(f"\n=== PAGE {current_page} ===")
    page_url = f"{base_url}&page={current_page}"
    driver.get(page_url)
    
    # V√©rifie s'il reste des annonces
    try:
        no_results = driver.find_element(By.XPATH, "//*[contains(text(), 'Aucun r√©sultat')]")
        print("‚ùå Fin des r√©sultats d√©tect√©e.")
        break
    except NoSuchElementException:
        print("‚úÖ R√©sultats trouv√©s, on continue.")

    # Attente al√©atoire pour para√Ætre plus humain
    time.sleep(random.uniform(1.5, 3.0))

    # Initialisation du compteur pour les annonces de la page
    index = 0

    while True:
        annonces = driver.find_elements(By.XPATH, '//*[@id="root"]/div/div[3]/div[1]/div[4]/div/div')

        if index >= len(annonces):
            print(f"‚úÖ Toutes les annonces de la page {current_page} ont √©t√© visit√©es !")
            break

        try:
            WebDriverWait(driver, 10).until(EC.element_to_be_clickable(annonces[index]))
            annonces[index].click()
            print(f"‚úÖ Clique sur l'annonce {index + 1} r√©ussi.")

            WebDriverWait(driver, 10).until(EC.number_of_windows_to_be(2))

            new_window = [window for window in driver.window_handles if window != original_window][0]
            driver.switch_to.window(new_window)
            print("üîÑ Pass√© √† la nouvelle fen√™tre.")

            # V√©rifier si l'annonce est sur "logic-immo.com"
            if "logic-immo.com" not in driver.current_url:
                print("üö® Redirection vers un site externe d√©tect√©e ! Fermeture de l'onglet...")
                driver.close()
                driver.switch_to.window(original_window)
                index += 1
                continue

            # Initialisation des variables
            pieces = superficie = etage = nombre_etages = prix = arrondissement = charges_annuelles = None
            balcon = ascenseur = parking = cave = accessible_mobilit√©_r√©duite = "Non"
            interphone = alarme = digicode = gardien = "Non"
            Cuisine_ouverte = sans_vis_√†_vis = calme = "Non"

            # ---------------- R√©cup√©rer les caract√©ristiques de l'annonce------------------------------------------
            caracteristiques_elements = driver.find_elements(By.XPATH, "//div[@class='css-j7qwjs']")
            for elem in caracteristiques_elements:
                try:
                    valeur = elem.find_element(By.CLASS_NAME, "css-1nxshv1").text   
                    nom = elem.find_element(By.CLASS_NAME, "css-15ctory").text.lower()

                    if nom == "pi√®ce" or "pi√®ces" in nom:
                        pieces = valeur
                    elif nom == "superficie":
                        superficie = valeur
                    elif nom == "√©tage":
                        etage_info = valeur
                        match = re.search(r'(\d+)/(\d+)', etage_info)
                        if match:
                            etage = match.group(1)  # Premier chiffre = √©tage actuel
                            nombre_etages = match.group(2)  # Deuxi√®me chiffre = nombre total d'√©tages
                        else:
                            etage = etage_info
                except:
                    continue

            # R√©cup√©rer le prix de l'annonce
            try:
                prix_element = driver.find_element(By.XPATH, "//span[@data-testid='aviv.CDP.Sections.Hardfacts.Price.Value']")
                prix = prix_element.text.strip()
                prix = prix.replace('√¢‚Ç¨¬Ø', ' ').replace('√¢‚Äö¬¨', '‚Ç¨')
                print(f"üí∞ Prix trouv√© : {prix}")
            except Exception as e:
                prix = None
                print(f"‚ùå Erreur de r√©cup√©ration du prix : {e}")
            # R√©cup√©rer l'arrondissement
            try:
                arrondissement_element = driver.find_element(By.XPATH, "//span[contains(@class, 'css-1ytyjyb') and contains (text(), 'Paris')]")
                arrondissement = arrondissement_element.text.strip()
                print(f"üìç Arrondissement trouv√© : {arrondissement}")
            except Exception as e:
                arrondissement = None
                print(f"‚ùå Erreur de r√©cup√©ration de l'arrondissement : {e}")
            
            # R√©cup√©rer Charges de copropri√©t√©
            # R√©cup√©rer les charges annuelles (si disponibles)
            try:
                charges_element = driver.find_element(By.XPATH, "//span[contains(@class, 'css-1thfuam') and contains(text(), '‚Ç¨/an')]")
                charges_annuelles = charges_element.text.strip()
                charges_annuelles = charges_annuelles.replace('√¢‚Ç¨¬Ø', ' ').replace('&nbsp;', ' ')
                print(f"üí∏ Charges annuelles trouv√©es : {charges_annuelles}")
            except Exception as e:
                print(f"‚ùå Aucune charge annuelle trouv√©e : {e}")

            # -----------------------Cliquer sur "Voir les caract√©ristiques" si disponible------------------------------
            try:
                voir_caracteristiques = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[@class='css-1gur7lg' and contains(text(), 'Voir les')]"))
                )
                voir_caracteristiques.click()
                print("üîé Bouton 'Voir les caract√©ristiques' cliqu√©.")
        
            except Exception as e:
                print(f"‚ùå Erreur avec le bouton 'Voir les caract√©ristiques' : {e}")
                

            #------------------------------------ R√©cup√©rer les caract√©ristiques cach√©es ----------------------------------------------
            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Balcon') or contains(text(), 'balcon') or contains(text(), 'BALCON')]"):
                    balcon = "Oui" 
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Ascenseur') or contains(text(), 'ascenseur') or contains(text(), 'ASCENSEUR')]"):
                    ascenseur = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Parking') or contains(text(), 'parking') or contains(text(), 'PARKING')]"):
                    parking = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Cave') or contains(text(), 'cave') or contains(text(), 'CAVE')]"):
                    cave = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Accessible aux personne √† mobilit√© r√©duite') or contains(text(), 'accessible aux personne √† mobilit√© r√©duite') or contains(text(), 'ACCESSIBLE AUX PERSONNE √Ä MOBILIT√â R√âDUITE')]"):
                    accessible_mobilit√©_r√©duite = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Interphone') or contains(text(), 'interphone') or contains(text(), 'INTERPHONE')]"):
                    interphone = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Alarme') or contains(text(), 'alarme') or contains(text(), 'ALARME')]"):
                    alarme = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Digicode') or contains(text(), 'digicode') or contains(text(), 'DIGICODE')]"):
                    digicode = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Gardien') or contains(text(), 'gardien') or contains(text(), 'GARDIEN')]"):
                    gardien = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Cuisine ouverte') or contains(text(), 'cuisine ouverte') or contains(text(), 'CUISINE OUVERTE')]"):
                    Cuisine_ouverte = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'Sans vis √† vis') or contains(text(), 'sans vis √† vis') or contains(text(), 'SANS VIS √Ä VIS')]"):
                    sans_vis_√†_vis = "Oui"
            except:
                pass

            try:
                if driver.find_element(By.XPATH, "//span[contains(text(), 'calme') or contains(text(), 'Calme') or contains(text(), 'CALME')]"):
                    calme = "Oui"
            except:
                pass

            # Ajouter les donn√©es √† la liste
            data.append([arrondissement, pieces, superficie, etage, nombre_etages, balcon, 
                         ascenseur, parking, prix, cave, accessible_mobilit√©_r√©duite, 
                         interphone, alarme, digicode, gardien,Cuisine_ouverte,sans_vis_√†_vis,calme,charges_annuelles])

            print(f"‚úÖ Annonce {index + 1} scrap√©e avec succ√®s !")

            # Fermer l'onglet et revenir √† la page principale
            driver.close()
            driver.switch_to.window(original_window)
            print("üîô Retour √† l'onglet des r√©sultats.")

            # Attendre le rechargement de la page principale
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/div[3]/div[1]/div[4]')))

            index += 1

        except Exception as e:
            print(f"‚ùå Erreur avec l'annonce {index + 1} : {e}")
            index += 1

    current_page += 1

# Fermer le navigateur
driver.quit()

# Enregistrer les donn√©es dans un fichier CSV
df = pd.DataFrame(data, columns=["Arrondissement", "Nombre de pieces", "Superficie", "Etage", 
                                "Nombre d'etages", "Balcon", "Ascenseur", "Parking", "Prix", 
                                "Cave", "Accessible_mobilit√©_r√©duite", "Interphone", 
                                "Alarme", "Digicode", "Gardien","Cuisine ouverte","Sans vis √† vis","Calme","Charge annuelles"])
df.to_csv("annonces_logic_immo9.csv", index=False, encoding="utf-8", sep=";")

print("üìÇ Fichier 'annonces_logic_immo8.csv' sauvegard√© avec succ√®s ! üéâ")
